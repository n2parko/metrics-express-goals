{
  "name": "metrics",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/segmentio/metrics.git"
  },
  "description": "Simple and pluggable metrics",
  "keywords": [
    "metrics",
    "API"
  ],
  "dependencies": {
    "debug": "^0.7.4",
    "ms": "^0.6.2"
  },
  "devDependencies": {
    "mocha": "^1.19.0"
  },
  "readme": "\n[![Build Status](https://circleci.com/gh/segmentio/metrics.png?circle-token=bf2af92121185d80a46f1a1f605a90ee1a6b4be1)](https://circleci.com/gh/segmentio/metrics)\n\n# metrics\n\n  Simple and _pluggable_ business **metrics**. It makes internal reporting _much_ easier.\n\n  [Segment](https://segment.io) uses **metrics** as an internal API to power our dashboards, auto-updating spreadsheets, and other admin services. \n\n```js\nvar Metrics = require('metrics');\n\nMetrics()\n  .every('5m', charges('stripe-key'))\n  .every('10m', subscriptions('stripe-key'))\n  .every('1h', helpscout('helpscout-key'))\n\n  .use(function (metrics) {\n    metrics.on('stripe charges last month', function (val) {\n      geckoboard('widget-id').number(val));\n    });\n  });\n```\n\nPlugins add their own metrics using keys like `stripe charges last month`. Each company can customize their reporting by writing their own [plugins](#plugins). \n\nThe code above calculates revenue and support metrics that can then be visualized with a dashboard, like [Geckoboard](https://geckoboard.com):\n\n![](https://f.cloud.github.com/assets/658544/2361169/09325510-a62e-11e3-8f49-e327e89595cd.png)\n\n\n  **It's easy to get started:** there's already plugins for [Stripe][1], [Helpscout][2], [AWS][3], and others.\n\n  **It separates data and views:** split the raw data from how its presented.\n\n  **It's dashboard agnostic:** so you can use [Geckoboard][4], [Ducksboard][5], [Leftronic][6], or your own internal dashboard.\n\n  **It pushes you in the right direction:** use [Segment][7]'s [metrics expertise][8] to avoid the wrong metrics.\n\n  **Its an internal metrics API:** [Segment](https://segment.io) uses the [metrics-express](https://github.com/segmentio/metrics-express) plugin to serve our metrics to other internal services (like admin tools and auto-updating spreadsheets).\n\n[1]: https://github.com/metrics-stripe-charges\n[2]: https://github.com/segmentio/metrics-helpscout\n[3]: https://github.com/segmentio/metrics-aws-billing\n[4]: http://www.geckoboard.com/\n[5]: https://ducksboard.com/\n[6]: https://www.leftronic.com/\n[7]: https://segment.io/\n[8]: https://segment.io/academy/dashboard-metrics-that-actually-work/\n\n## Installation\n\n    $ npm install segmentio/metrics\n\n\n## How does it work?\n\n**Metrics** is super simple. Plugins write data into a key value store, and other plugins then send that data to dashboards or other reporting tools.\n\nA plugin can learn about how much you're making on Stripe, and make that data available:\n\n```js\nvar stripe = require('stripe')(key);\n\nmodule.exports = function (metrics) {\n  stripe.charges.list(function (err, charges) {\n    metrics.set('total charges', charges.length);\n  });\n};\n```\n\nand another plugin can push the data to a geckoboard:\n\n```js\nvar geckoboard = require('geckobard')('api-key');\n\nmodule.exports = function (metrics) {\n  metrics.on('total charges', geckoboard('widget-id').number);\n}\n```\n\nand now you have your first dashboard.\n\n```js\nMetrics()\n  .every('5m', charges)\n  .use(dashboard);\n```\n\n## Plugins\n\n Existing plugins for metrics can tell you:\n\n- [metrics-aws-billing](https://github.com/segmentio/metrics-aws-billing) - how much your AWS hosting costs\n- [metrics-helpscout](https://github.com/segmentio/metrics-helpscout) - how many active [Helpscout](http://helpscout.com) support tickets you have, and who they're assigned to\n- [metrics-stripe-charges](https://github.com/segmentio/metrics-stripe-charges) - how much money you're making every month (and today!)\n- [metrics-stripe-subscriptions](https://github.com/segmentio/metrics-stripe-charges) - how much subscriptions you have, and how much recurring revenue you're generating\n- [metrics-express](https://github.com/segmentio/metrics-express) - serves your metrics as an HTTP API using an express subapp\n\n![](https://f.cloud.github.com/assets/658544/2361183/33c4df78-a62e-11e3-9921-6591e787e43e.png)\n\nIt's normal for every company to care about different metrics. If your plugin can help others do easier reporting, pull request this [Readme.md](https://github.com/segmentio/metrics/blob/master/Readme.md) to add your own plugin to this list.\n\n## API\n\nAt its core, **metrics** is a simple key value store. Plugins put data into a hashtable, and other plugins then use that data to update dashboards, send emails, or really anything you want.\n\n#### new Metrics()\n\nCreate a new `Metrics` instance.\n\n#### .set(key, val)\n\nSet a `key` / `val` pair.\n\n#### .get(key)\n\nGet a value at `key`.\n\n#### .keys()\n\nGet a list of keys.\n\n#### .every(interval, plugin)\n\nAdd a metrics plugin to run on an `interval`.\n\n```js\nvar metrics = new Metrics()\n  .every('5m', function (metrics) {\n    metrics.set('hours', new Date().getHours());\n    metrics.set('minutes', new Date().getMinutes());\n  });\n```\n\n#### .on(keys.., cb)\n\nListen for when one or more keys become available.\n\n```js\nvar metrics = new Metrics()\n  .every('5m', function (metrics) {\n    metrics.set('hours', new Date().getHours());\n    metrics.set('minutes', new Date().getMinutes());\n  });\n\nmetrics.on('hours', 'minutes', function (h, m) {\n  console.log('time update: ' + h + ':' + m);\n});\n```\n\n#### .use(plugin)\n\nAdd a plugin that consumes metrics data.\n\n```js\nnew Metrics()\n  .every('5m', function (metrics) {\n    metrics.set('hours', new Date().getHours());\n    metrics.set('minutes', new Date().getMinutes());\n  })\n  .use(function (metrics) {\n    metrics.on('hours', 'minutes', function (h, m) {\n      console.log('time update: ' + h + ':' + m);\n    });\n  });\n\n```\n\n## License\n\n```\nWWWWWW||WWWWWW\n W W W||W W W\n      ||\n    ( OO )__________\n     /  |           \\\n    /o o|    MIT     \\\n    \\___/||_||__||_|| *\n         || ||  || ||\n        _||_|| _||_||\n       (__|__|(__|__|\n```",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/segmentio/metrics/issues"
  },
  "homepage": "https://github.com/segmentio/metrics",
  "_id": "metrics@0.0.1",
  "_shasum": "f1a5a2e00f7d531b0e263a7dfc7e8dd457061f32",
  "_resolved": "git://github.com/segmentio/metrics#aabd37a4c4faf06958a1868b3d8994c5147559a3",
  "_from": "git://github.com/segmentio/metrics",
  "_fromGithub": true
}
